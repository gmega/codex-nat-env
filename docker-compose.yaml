services:
  # nat_codex_1:
  #   build: ./codex
  #   cap_add:
  #     - NET_ADMIN
  #   networks:
  #     private_network_1:
  #       ipv4_address: ${CODEX_1_PRIVATE_ADDR}

  # nat_router_1:
  #   build: ./router
  #   cap_add:
  #     - NET_ADMIN
  #   networks:
  #     private_network_1:
  #       ipv4_address: ${NAT_ROUTER_1_PRIVATE_ADDR}
  #     public_internet:
  #       ipv4_address: ${NAT_ROUTER_1_PUBLIC_ADDR}

  nat_codex_2:
    build: ./codex
    cap_add:
      - NET_ADMIN
    environment:
      - GATEWAY=${NAT_ROUTER_2_PRIVATE_ADDR}
      - BOOTSTRAP_NODE_ADDR=${PUBLIC_CODEX_ADDR}
    volumes:
      - ./logs/nat-codex-2:/opt/codex/logs
    networks:
      private_network_2:
        ipv4_address: ${NAT_CODEX_2_ADDR}
    depends_on:
      public_codex:
        condition: service_healthy

  nat_router_2:
    build: ./router
    cap_add:
      - NET_ADMIN
    environment:
      - INTERNAL_SUBNET=${PRIVATE_SUBNET_2}
      - EXTERNAL_ADDR=${NAT_ROUTER_2_PUBLIC_ADDR}
    networks:
      private_network_2:
        ipv4_address: ${NAT_ROUTER_2_PRIVATE_ADDR}
      public_internet:
        ipv4_address: ${NAT_ROUTER_2_PUBLIC_ADDR}

  public_codex:
    build: ./codex
    environment:
      - SUBNET=${PUBLIC_SUBNET}
    volumes:
      - ./logs/public-codex:/opt/codex/logs
    healthcheck:
      test: "curl http://localhost:8080/api/codex/v1/debug/info"
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      public_internet:
        ipv4_address: ${PUBLIC_CODEX_ADDR}

networks:
  public_internet:
    ipam:
      config:
        - subnet: ${PUBLIC_SUBNET}

  private_network_1:
    ipam:
      config:
        - subnet: ${PRIVATE_SUBNET_1}

  private_network_2:
    ipam:
      # Ideally we would use the same subnetwork as private_network_1
      # but turns out this is not supported by default.
      config:
        - subnet: ${PRIVATE_SUBNET_2}